#!/bin/bash

# This program takes an input directory containing FASTQ files and runs FastQC on each file.
# Results from FastQC are then stored in a user-specified output directory.
# By default, a MultiQC report is generated from the FastQC results and stored in the output directory.
# Use the --multiqc-off flag to skip generating the MultiQC report.

help(){
    echo ""
    echo "Wrapper for running FastQC on fastq.gz files generated by Illumina paired-end sequencing"
    echo "Generates a MultiQC report from the FastQC results unless --multiqc-off is specified"
    echo ""
    echo "FastQC and MultiQC are run in Docker containers."
    echo "Warning: Docker must be installed and set up correctly to run this program."
    echo ""
    echo "Usage: $0 --fastq <fastq_directory> --output <output_directory> [--multiqc-off]"
    echo ""
    echo "Options:"
    echo "  --fastq,  -f   Path to FASTQ directory (paired-end; *_R1*.fastq and *_R2*.fastq)"
    echo "  --output, -o   Path to directory where QC reports will be stored"
    echo "  --multiqc-off  Do not generate the MultiQC report"
    echo "  --help,   -h   Display this help message and exit"
}

# If no parameters are provided, print the help dialogue.
if [ $# -eq 0 ]; then
  help
  exit 1
fi

# Initialize variables
fastq_dir=""
output_dir=""
multiqc="on"  # default is to run multiqc

# Parse command-line arguments.
while [[ "$#" -gt 0 ]]; do
    case $1 in
        --fastq|-f)
            fastq_dir="$2"
            echo "fastq_dir: $fastq_dir"
            shift 2
            ;;
        --output|-o)
            output_dir="$2"
            echo "output_dir: $output_dir"
            shift 2
            ;;
        --multiqc-off)
            multiqc="off"
            echo "MultiQC report generation is turned OFF"
            shift 1
            ;;
        --help|-h)
            help
            exit 0
            ;;
        *)
            echo "Unknown option: $1"
            help
            exit 1
            ;;
    esac
done

# Check that both required directories have been provided.
if [ -z "$fastq_dir" ] || [ -z "$output_dir" ]; then
    echo "Error: Both --fastq and --output options must be specified."
    help
    exit 1
fi

# Check the input directory exists.
if [ ! -d "$fastq_dir" ]; then
    echo "Error: FASTQ directory '$fastq_dir' does not exist."
    exit 1
fi

# Create the output directory if it doesn't exist.
if [ ! -d "$output_dir" ]; then
    echo "Output directory '$output_dir' does not exist."
    echo "Creating output directory..."
    mkdir -p "$output_dir"
fi

# Running FastQC using a Docker image.
FASTQC_DOCKER_IMAGE="staphb/fastqc:latest"

# Pull the FastQC Docker image.
docker pull $FASTQC_DOCKER_IMAGE

# Loop through FASTQ files in the input directory matching the flexible _R1 pattern.
for r1 in "${fastq_dir}"/*_R1*.fastq*; do
    # Construct the corresponding R2 filename by replacing the first occurrence of _R1 with _R2.
    r2="${r1/_R1/_R2}"

    # Check if the paired R2 file exists.
    if [ -f "$r2" ]; then
        echo "Processing paired files:"
        echo "  Read 1: $r1"
        echo "  Read 2: $r2"

        # Extract only the base filenames for use inside the container.
        r1_base=$(basename "$r1")
        r2_base=$(basename "$r2")

        # Run FastQC using Docker.
        docker run --rm \
          -u "$(id -u):$(id -g)" \
          -v "$(realpath "$fastq_dir")":/data/input \
          -v "$(realpath "$output_dir")":/data/output \
          $FASTQC_DOCKER_IMAGE \
          fastqc /data/input/"$r1_base" /data/input/"$r2_base" --outdir /data/output
    else
        echo "Warning: Paired file for $r1 not found. Skipping."
    fi
done

# If MultiQC is enabled, generate a MultiQC report.
if [ "$multiqc" = "on" ]; then
    # Define the MultiQC Docker image.
    MULTIQC_DOCKER_IMAGE="multiqc/multiqc"
    docker pull $MULTIQC_DOCKER_IMAGE

    # Generate a MultiQC report from the FastQC results.
    report_name="$(date +%y-%m-%d)_mutliqc_report.html"
    
    docker run --rm \
      -u "$(id -u):$(id -g)" \
      -v "$(realpath "$output_dir")":/data \
      $MULTIQC_DOCKER_IMAGE \
      multiqc -n "$report_name" -o /data /data
fi

echo "Processing completed."